{"version":3,"file":"bundle.js","mappings":"mBAAA,IACIA,EADAC,EAAQ,EAGL,SAASC,IACZ,IAAIC,EAAOF,EAGX,OAFAA,EAAQ,EACRG,cAAcJ,GACPG,CACX,CCwBO,MAAME,EAAaC,IACtB,IAAIC,GAAa,EACbC,GAAc,EACdC,GAAY,EAEhB,MAAMC,EAAUC,SAASC,cAA2B,QAEpD,GAAgB,OAAZF,EAAkB,ECKnB,SAA8BA,EAAsBJ,GACvDI,EAAQG,UAAY,g9BAqBpB,MAAMC,EAAUH,SAASC,cAAc,gBAEvCE,SAAAA,EAASC,iBAAiB,UAAU,KAChCV,EAAUC,EAAU,GAE5B,CD/BQU,CAAqBN,EAASJ,GAE9B,MAAMW,EAASN,SAASC,cACpB,yBAEEM,EAASP,SAASC,cACpB,yBE3CkB,EAC1BO,EACAb,EACAY,EACAD,KAEA,MAAMG,EAAW,CAAC,SAAU,SAAU,WAAY,WAC5CC,EAAO,CAAC,EAAG,EAAG,EAAG,EAAG,GAAI,OAAQ,QAAS,OAAQ,OACvD,IAAIC,EAAkD,GAEtD,IAAK,IAAIC,EAAI,EAAGA,EAAIjB,EAAY,EAAGiB,IAAK,CACpC,MAAMC,EAA0C,CAAC,EACjD,IAAIC,EACAC,EACJ,GACID,EAAOL,EAASO,KAAKC,MAAMD,KAAKE,SAAWT,EAASU,SACpDJ,EAAOL,EAAKM,KAAKC,MAAMD,KAAKE,SAAWR,EAAKS,eAE5CR,EAAUS,MACLC,GACGC,OAAOC,OAAOF,GAAM,KAAON,GAC3BO,OAAOE,KAAKH,GAAM,KAAOP,KAGrCD,EAAIC,GAAQC,EACZJ,EAAUc,KAAKZ,GACfF,EAAUc,KAAKZ,E,CAEnBF,EC/BmB,CAACe,IACpB,IACIC,EADAC,EAAeF,EAAMP,OAGzB,GAAqB,IAAjBO,EAAMP,OAEN,OADCO,EAAM,GAAIA,EAAM,IAAM,CAACA,EAAM,GAAIA,EAAM,IACjCA,EAGX,KAAwB,IAAjBE,GACHD,EAAcX,KAAKC,MAAMD,KAAKE,SAAWU,GACzCA,KAECF,EAAME,GAAeF,EAAMC,IAAgB,CACxCD,EAAMC,GACND,EAAME,IAId,OAAOF,CAAK,EDYAG,CAAQlB,GAEpB,IAAK,MAAMI,KAAQJ,EACf,IAAK,MAAMmB,KAAOf,EACdP,EAAeN,WAAa,6CAA6Ca,EAAKe,MAAQA,+GAGrDf,EAAKe,MAAQA,mNAWtD,MAAMC,EAAc/B,SAASgC,iBAAiB,gBACxCC,EAAYjC,SAASgC,iBAAiB,qBAE5CE,YAAW,KACP,IAAK,MAAMC,KAAYF,EACnBE,EAASC,UAAUC,IAAI,UAE3B,IAAK,MAAMC,KAAaP,EACpBO,EAAUF,UAAUG,OAAO,UAEhB,OAAXhC,GAA8B,OAAXD,GHjDxB,SAAoBC,EAAqBD,GAC5Cf,IACA,IAAIiD,EAAY,EACZC,EAAY,EAChBpD,EAAgBqD,aAAY,WACxBpD,GAAS,EACTkD,EAAYxB,KAAKC,MAAM3B,GAAkC,GAAzB0B,KAAKC,MAAM3B,EAAQ,IACnDmD,EAAYzB,KAAKC,MAAM3B,EAAQ,IAC/BiB,EAAOL,UAAYyC,OACfH,EAAY,GAAK,IAAMA,EAAUI,WAAaJ,GAElDlC,EAAOJ,UAAYyC,OACfF,EAAY,GAAK,IAAMA,EAAUG,WAAaH,EAEtD,GAAG,IACP,CGmCYI,CAAWtC,EAAQD,E,GAExB,IAEa,EFdZwC,CAFuB9C,SAASC,cAAc,mBAI1CN,EACAY,EACAD,GAGJ,MAAMyC,EAAY/C,SAASgC,iBAA8B,eAEzDe,EAAUC,SAAQ,CAACjC,EAAMkC,KACrBlC,EAAKX,iBAAiB,SAAS,K,SACT,IAAdN,GAAuBiB,EAAKqB,UAAUc,SAAS,aAER,QADvC,EAAAnC,EACKd,cAAc,4BAAoB,SACjCmC,UAAUG,OAAO,UACW,QAAlC,EAAAxB,EAAKd,cAAc,uBAAe,SAAEmC,UAAUC,IAAI,WAE/B,IAAfzC,EACAA,EAAYqD,EACLA,IAAUrD,IACjBC,EAAaoD,EACbnD,GAAY,IAIG,IAAfF,IACgB,IAAhBC,GACAD,IAAcC,IAGVkD,EAAUnD,GAAWuD,QAAQpC,OAC7BgC,EAAUlD,GAAYsD,QAAQpC,KAE9BmB,YAAW,KACPa,EAAUnD,GAAWwC,UAAUC,IAAI,WACnCU,EAAUlD,GAAYuC,UAAUC,IAAI,WACpCvC,GAAY,EACZF,GAAa,EACbC,GAAc,EAEVuD,MAAMC,KAAKN,GAAWO,OAAOvC,GACzBA,EAAKqB,UAAUc,SAAS,cAnFhE,WACI,MAAM1D,EAAOD,IACPiD,EAAYxB,KAAKC,MAAMzB,GAAgC,GAAxBwB,KAAKC,MAAMzB,EAAO,IACjDiD,EAAYzB,KAAKC,MAAMzB,EAAO,IAC9B+D,EAAcvD,SAASC,cAA2B,iBACxDiC,YAAW,KACHqB,GC2DL,SACHA,EACAf,EACAC,G,MAEA,MAAMe,EACFD,EAAYtD,cAA2B,mBAC3CsD,EAAYE,MAAMC,QAAU,QAC5BF,EAActD,UAAY,8TAMduC,EAAY,GAAK,IAAMA,EAAUG,WAAaH,2DAG9CD,EAAY,GAAK,IAAMA,EAAUI,WAAaJ,wGAMzB,QADjC,EAAAxC,SACK2D,eAAe,qBAAa,SAC3BvD,iBAAiB,SAAS,IAAMwD,KAC1C,CDnFYC,CAAyBN,EAAaf,EAAWC,E,GAEtD,IACP,CA4EoCqB,E,GAEL,KA5E/B,WACI,MAAMtE,EAAOD,IACPiD,EAAYxB,KAAKC,MAAMzB,GAAgC,GAAxBwB,KAAKC,MAAMzB,EAAO,IACjDiD,EAAYzB,KAAKC,MAAMzB,EAAO,IAC9B+D,EAAcvD,SAASC,cAA2B,iBACxDiC,YAAW,KACHqB,GC0EL,SACHA,EACAf,EACAC,G,MAEA,MAAMe,EACFD,EAAYtD,cAA2B,mBAC3CsD,EAAYE,MAAMC,QAAU,QAC5BF,EAActD,UAAY,4TAMVuC,EAAY,GAAK,IAAMA,EAAUG,WAAaH,+DAG9CD,EAAY,GAAK,IAAMA,EAAUI,WAAaJ,4GAM7B,QADjC,EAAAxC,SACK2D,eAAe,qBAAa,SAC3BvD,iBAAiB,SAAS,IAAMwD,KAC1C,CDlGYG,CAAsBR,EAAaf,EAAWC,E,GAEnD,IACP,CAoE4BuB,I,GAId,G,GI7Fd,SAASC,EAAaC,GAClB,IAAIvE,EAYJ,OAVAwE,OAAOC,OAASF,EAAUG,MAGtB1E,EADiB,IAAjBwE,OAAOC,MACK,EACY,IAAjBD,OAAOC,MACF,GAEA,GAGTzE,CACX,CAEO,MAAMiE,EAAa,KACtB,MAAM7D,EAAUC,SAASC,cAA2B,QAEpD,GAAgB,OAAZF,EAAkB,EHzBnB,SAAwBA,GAC3BA,EAAQG,UAAY,qrDAsCxB,CGbQoE,CAAevE,GAEf,MAAMwE,EACFvE,SAASgC,iBAAmC,gBAC1CwC,EAAgBxE,SAASC,cAAc,qBAE7CuE,SAAAA,EAAepE,iBAAiB,UAAU,KACtC,IAAK,MAAM8D,KAAaK,EACpB,GAAIL,EAAUO,QAAS,CACnB,MAAM9E,EAAYsE,EAAaC,GAC/BxE,EAAUC,E,OCnC1BiE,G","sources":["webpack://cardgame/./src/js/timer.ts","webpack://cardgame/./src/js/startGame.ts","webpack://cardgame/./src/js/renderComponents.ts","webpack://cardgame/./src/js/createCardList.ts","webpack://cardgame/./src/js/help.ts","webpack://cardgame/./src/js/cardMenu.ts","webpack://cardgame/./src/js/main.ts"],"sourcesContent":["let timer = 0;\nlet timerInterval: ReturnType<typeof setTimeout>;\n\nexport function stopTimer(): number {\n    let time = timer;\n    timer = 0;\n    clearInterval(timerInterval);\n    return time;\n}\n\nexport function startTimer(second: HTMLElement, minute: HTMLElement) {\n    stopTimer();\n    let secondVal = 0;\n    let minuteVal = 0;\n    timerInterval = setInterval(function () {\n        timer += 1;\n        secondVal = Math.floor(timer) - Math.floor(timer / 60) * 60;\n        minuteVal = Math.floor(timer / 60);\n        second.innerHTML = String(\n            secondVal < 10 ? \"0\" + secondVal.toString() : secondVal,\n        );\n        minute.innerHTML = String(\n            minuteVal < 10 ? \"0\" + minuteVal.toString() : minuteVal,\n        );\n    }, 1000);\n}\n","import { createCardList } from \"./createCardList\";\nimport { stopTimer } from \"./timer\";\nimport {\n    renderCardGameHeader,\n    renderSuccessModalWindow,\n    renderFailModalWindow,\n} from \"./renderComponents\";\n\nfunction finishSuccessGame() {\n    const time = stopTimer();\n    const secondVal = Math.floor(time) - Math.floor(time / 60) * 60;\n    const minuteVal = Math.floor(time / 60);\n    const modalWindow = document.querySelector<HTMLElement>(\".cards__modal\");\n    setTimeout(() => {\n        if (modalWindow) {\n            renderSuccessModalWindow(modalWindow, secondVal, minuteVal);\n        }\n    }, 500);\n}\n\nfunction finishFailGame() {\n    const time = stopTimer();\n    const secondVal = Math.floor(time) - Math.floor(time / 60) * 60;\n    const minuteVal = Math.floor(time / 60);\n    const modalWindow = document.querySelector<HTMLElement>(\".cards__modal\");\n    setTimeout(() => {\n        if (modalWindow) {\n            renderFailModalWindow(modalWindow, secondVal, minuteVal);\n        }\n    }, 500);\n}\n\nexport const startGame = (countCard: number) => {\n    let firstCard = -1;\n    let secondCard = -1;\n    let clickable = true;\n\n    const appHtml = document.querySelector<HTMLElement>(\".app\");\n\n    if (appHtml !== null) {\n        renderCardGameHeader(appHtml, countCard);\n\n        const minute = document.querySelector<HTMLElement>(\n            \".time__value--minutes\",\n        );\n        const second = document.querySelector<HTMLElement>(\n            \".time__value--seconds\",\n        );\n        const cardsContainer = document.querySelector(\".cards__wrapper\");\n\n        createCardList(\n            cardsContainer as HTMLElement,\n            countCard,\n            second as HTMLElement,\n            minute as HTMLElement,\n        );\n\n        const cardsList = document.querySelectorAll<HTMLElement>(\".cards_item\");\n\n        cardsList.forEach((card, index) => {\n            card.addEventListener(\"click\", () => {\n                if (clickable === true && !card.classList.contains(\"success\")) {\n                    card\n                        .querySelector(\".card__open-image\")\n                        ?.classList.remove(\"hidden\");\n                    card.querySelector(\".card__image\")?.classList.add(\"hidden\");\n\n                    if (firstCard === -1) {\n                        firstCard = index;\n                    } else if (index !== firstCard) {\n                        secondCard = index;\n                        clickable = false;\n                    }\n\n                    if (\n                        firstCard !== -1 &&\n                        secondCard !== -1 &&\n                        firstCard !== secondCard\n                    ) {\n                        if (\n                            cardsList[firstCard].dataset.card ===\n                            cardsList[secondCard].dataset.card\n                        ) {\n                            setTimeout(() => {\n                                cardsList[firstCard].classList.add(\"success\");\n                                cardsList[secondCard].classList.add(\"success\");\n                                clickable = true;\n                                firstCard = -1;\n                                secondCard = -1;\n                                if (\n                                    Array.from(cardsList).every((card) =>\n                                        card.classList.contains(\"success\"),\n                                    )\n                                ) {\n                                    finishSuccessGame();\n                                }\n                            }, 500);\n                        } else {\n                            finishFailGame();\n                        }\n                    }\n                }\n            });\n        });\n    }\n};\n","import { startGame } from \"./startGame\";\nimport { createMenu } from \"./cardMenu\";\n\nexport function renderGameMenu(appHtml: HTMLElement) {\n    appHtml.innerHTML = `<section class=\"complexity\">\n                <h1 class=\"complexity__title\">Выбери сложность</h1>\n                <form action=\"\" class=\"complexity__form\">\n                    <div class=\"complexity__levels\">\n                        <div class=\"complexity__level\">\n                            <input\n                                type=\"radio\"\n                                name=\"level\"\n                                class=\"radio-input\"\n                                value=\"1\"\n                                id=\"radio1\"\n                            />\n                            <label for=\"radio1\">1</label>\n                        </div>\n                        <div class=\"complexity__level\">\n                            <input\n                                type=\"radio\"\n                                name=\"level\"\n                                class=\"radio-input\"\n                                value=\"2\"\n                                id=\"radio2\"\n                            />\n                            <label for=\"radio2\">2</label>\n                        </div>\n                        <div class=\"complexity__level\">\n                            <input\n                                type=\"radio\"\n                                name=\"level\"\n                                class=\"radio-input\"\n                                value=\"3\"\n                                id=\"radio3\"\n                            />\n                            <label for=\"radio3\">3</label>\n                        </div>\n                    </div>\n                    <button class=\"complexity__button btn-start\">Старт</button>\n                </form>\n            </section>`;\n}\n\nexport function renderCardGameHeader(appHtml: HTMLElement, countCard: number) {\n    appHtml.innerHTML = `<section class=\"cards\">\n                    <div class=\"cards__title\">\n                        <div class=\"cards__time time\">\n                            <div class=\"time__units\">min</div>\n                            <div class=\"time__units time__units--sek\">sek</div>\n                            <div class=\"time__value\">\n                            <div class=\"time__value--minutes\">00</div>.\n                            <div class=\"time__value--seconds\">00</div>\n                            </div>\n                        </div>\n                        <form action=\"\" class=\"start-again\">\n                            <button type=\"submit\">Начать заново</button>\n                        </form>\n                    </div>\n                    <div class=\"cards__wrapper\">\n                    </div>\n                </section>\n                <div class=\"cards__modal modal\">\n                    <div class=\"modal__content\"></div>\n                </div>`;\n\n    const restart = document.querySelector(\".start-again\");\n\n    restart?.addEventListener(\"submit\", () => {\n        startGame(countCard);\n    });\n}\n\nexport function renderSuccessModalWindow(\n    modalWindow: HTMLElement,\n    secondVal: number,\n    minuteVal: number,\n) {\n    const modalContent =\n        modalWindow.querySelector<HTMLElement>(\".modal__content\");\n    modalWindow.style.display = \"block\";\n    modalContent!.innerHTML = `<img class=\"modal__image\" height=\"92px\" src=\"./static/images/celebration.svg\" alt=\"\">\n    <div class=\"modal__title\">Вы выиграли!</div>\n    <div class=\"modal__time\">\n        <div class=\"modal__text\"> Затраченное время:</div>\n        <div class=\"modal__time-value\">\n            <div class=\"time__value--minutes\">${\n                minuteVal < 10 ? \"0\" + minuteVal.toString() : minuteVal\n            }</div>.\n            <div class=\"time__value--seconds\">${\n                secondVal < 10 ? \"0\" + secondVal.toString() : secondVal\n            }</div>\n        </div>\n    </div>\n    <button class=\"button\" id=\"game-again\">Играть снова</button>`;\n    document\n        .getElementById(\"game-again\")\n        ?.addEventListener(\"click\", () => createMenu());\n}\n\nexport function renderFailModalWindow(\n    modalWindow: HTMLElement,\n    secondVal: number,\n    minuteVal: number,\n) {\n    const modalContent =\n        modalWindow.querySelector<HTMLElement>(\".modal__content\");\n    modalWindow.style.display = \"block\";\n    modalContent!.innerHTML = `<img class=\"modal__image\" height=\"92px\" src=\"./static/images/dead.svg\" alt=\"\">\n    <div class=\"modal__title\">Вы проиграли!</div>\n    <div class=\"modal__time\">\n        <div class=\"modal__text\"> Затраченное время:</div>\n        <div class=\"modal__time-value\">\n                <div class=\"time__value--minutes\">${\n                    minuteVal < 10 ? \"0\" + minuteVal.toString() : minuteVal\n                }</div>.\n                <div class=\"time__value--seconds\">${\n                    secondVal < 10 ? \"0\" + secondVal.toString() : secondVal\n                }</div>\n            </div>\n    </div>\n    <button class=\"button\" id=\"game-again\">Играть снова</button>`;\n    document\n        .getElementById(\"game-again\")\n        ?.addEventListener(\"click\", () => createMenu());\n}\n","import { shuffle } from \"./help\";\nimport { startTimer } from \"./timer\";\n\nexport const createCardList = (\n    cardsContainer: HTMLElement,\n    countCard: number,\n    second: HTMLElement,\n    minute: HTMLElement,\n) => {\n    const cardSuit = [\"spades\", \"hearts\", \"diamonds\", \"crosses\"];\n    const rang = [6, 7, 8, 9, 10, \"jack\", \"queen\", \"king\", \"ace\"];\n    let gameCards: { [key: string]: string | number }[] = [];\n\n    for (let i = 0; i < countCard / 2; i++) {\n        const obj: { [key: string]: string | number } = {};\n        let suit: string;\n        let card: string | number;\n        do {\n            suit = cardSuit[Math.floor(Math.random() * cardSuit.length)];\n            card = rang[Math.floor(Math.random() * rang.length)];\n        } while (\n            gameCards.some(\n                (item) =>\n                    Object.values(item)[0] === card &&\n                    Object.keys(item)[0] === suit,\n            )\n        );\n        obj[suit] = card;\n        gameCards.push(obj);\n        gameCards.push(obj);\n    }\n    gameCards = shuffle(gameCards);\n\n    for (const card of gameCards) {\n        for (const key in card) {\n            cardsContainer.innerHTML += `<div class=\"cards_item card\" data-card = \"${card[key]} ${key}\">\n            <img\n                class=\"card__open-image\"\n                src=\"./static/images/cards/${card[key]} ${key}.png\"\n            />\n            <img\n                class=\"card__image hidden\"\n                src=\"./static/images/Mask group.svg\"\n                alt=\"Закрытая карта\"\n            />\n        </div>`;\n        }\n    }\n\n    const closedCards = document.querySelectorAll(\".card__image\");\n    const openCards = document.querySelectorAll(\".card__open-image\");\n\n    setTimeout(() => {\n        for (const openCard of openCards) {\n            openCard.classList.add(\"hidden\");\n        }\n        for (const closeCard of closedCards) {\n            closeCard.classList.remove(\"hidden\");\n        }\n        if (second !== null && minute !== null) {\n            startTimer(second, minute);\n        }\n    }, 3000);\n\n    return gameCards;\n};\n","export const shuffle = (array: { [key: string]: string | number }[]) => {\n    let currentIndex = array.length,\n        randomIndex;\n\n    if (array.length === 2) {\n        [array[0], array[1]] = [array[1], array[0]];\n        return array;\n    }\n\n    while (currentIndex !== 0) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex--;\n\n        [array[currentIndex], array[randomIndex]] = [\n            array[randomIndex],\n            array[currentIndex],\n        ];\n    }\n\n    return array;\n};\n","import { startGame } from \"./startGame\";\nimport { renderGameMenu } from \"./renderComponents\";\n\ndeclare global {\n    interface Window {\n        level: number;\n    }\n}\n\nfunction getGameLevel(gameLevel: HTMLInputElement) {\n    let countCard;\n\n    window.level = +gameLevel.value;\n\n    if (window.level === 1) {\n        countCard = 6;\n    } else if (window.level === 2) {\n        countCard = 12;\n    } else {\n        countCard = 18;\n    }\n\n    return countCard;\n}\n\nexport const createMenu = () => {\n    const appHtml = document.querySelector<HTMLElement>(\".app\");\n\n    if (appHtml !== null) {\n        renderGameMenu(appHtml);\n\n        const gameLevels =\n            document.querySelectorAll<HTMLInputElement>(\".radio-input\");\n        const formForLevels = document.querySelector(\".complexity__form\");\n\n        formForLevels?.addEventListener(\"submit\", () => {\n            for (const gameLevel of gameLevels) {\n                if (gameLevel.checked) {\n                    const countCard = getGameLevel(gameLevel);\n                    startGame(countCard);\n                }\n            }\n        });\n    }\n};\n","import \"../scss/style.scss\";\nimport { createMenu } from \"./cardMenu\";\n\nconst renderApp = () => {\n    createMenu();\n};\n\nrenderApp();\n"],"names":["timerInterval","timer","stopTimer","time","clearInterval","startGame","countCard","firstCard","secondCard","clickable","appHtml","document","querySelector","innerHTML","restart","addEventListener","renderCardGameHeader","minute","second","cardsContainer","cardSuit","rang","gameCards","i","obj","suit","card","Math","floor","random","length","some","item","Object","values","keys","push","array","randomIndex","currentIndex","shuffle","key","closedCards","querySelectorAll","openCards","setTimeout","openCard","classList","add","closeCard","remove","secondVal","minuteVal","setInterval","String","toString","startTimer","createCardList","cardsList","forEach","index","contains","dataset","Array","from","every","modalWindow","modalContent","style","display","getElementById","createMenu","renderSuccessModalWindow","finishSuccessGame","renderFailModalWindow","finishFailGame","getGameLevel","gameLevel","window","level","value","renderGameMenu","gameLevels","formForLevels","checked"],"sourceRoot":""}